(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{510:function(t,s,e){"use strict";e.r(s);var a=e(3),i=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"git-实用小技巧"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-实用小技巧"}},[t._v("#")]),t._v(" git 实用小技巧")]),t._v(" "),e("blockquote",[e("p",[t._v("有兴趣可以了解一下 git 命令学习工具，学 git 就跟闯关一样：https://oschina.gitee.io/learn-git-branching/")])]),t._v(" "),e("h3",{attrs:{id:"_1-全局初始配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-全局初始配置"}},[t._v("#")]),t._v(" 1. 全局初始配置")]),t._v(" "),e("h4",{attrs:{id:"配置-用户名和邮箱"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置-用户名和邮箱"}},[t._v("#")]),t._v(" 配置 用户名和邮箱")]),t._v(" "),e("blockquote",[e("p",[t._v("由于我们使用 git 在企业当中一般都是多人开发，所以要明确代码是谁提交的，需要先设置一下身份，设置方法也很简单")])]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.name 用户名 "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置全局git的用户名")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" config --global user.email 邮箱 "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置全局git的邮箱")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("h4",{attrs:{id:"配置-私钥和公钥"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置-私钥和公钥"}},[t._v("#")]),t._v(" 配置 私钥和公钥")]),t._v(" "),e("p",[t._v("打开 git bash 敲如下命令")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("ssh-keygen -t rsa "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成私钥和公钥，命令敲完连按三下回车即可")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" ~/.ssh/id_rsa.pub "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 检查公钥有没有生成，有一堆东西表名可以了")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("进入 c 盘的用户目录，找到.ssh 文件夹里的文件，把里面的 id_rsa.pub 文件内容拷贝出来，在 gitee 中添加 ssh 公钥粘到文本域提交即可")]),t._v(" "),e("h3",{attrs:{id:"git-工程中-文件的四种种状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-工程中-文件的四种种状态"}},[t._v("#")]),t._v(" git 工程中 文件的四种种状态")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到 git 库, 不参与版本控制. "),e("code",[t._v("通过git add 状态变为Staged")])])]),t._v(" "),e("li",[e("p",[t._v("Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, "),e("code",[t._v("如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件")])])]),t._v(" "),e("li",[e("p",[t._v("Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过 git add 可进入暂存 staged 状态, 使用"),e("code",[t._v("git checkout 则丢弃修改过")]),t._v(", 返回到 unmodify 状态, 这个"),e("code",[t._v("git checkout即从库中取出文件, 覆盖当前修改")])])]),t._v(" "),e("li",[e("p",[t._v("Staged: 暂存状态. 执行 git commit 则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为 Unmodify 状态. 执行"),e("code",[t._v("git reset HEAD filename取消暂存, 文件状态为Modified")])])])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/yourmouse/cdn@master/tools/git-process.png",alt:"git本地操作大致流程图"}})]),t._v(" "),e("h3",{attrs:{id:"github-pages-gitee-pages-服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#github-pages-gitee-pages-服务"}},[t._v("#")]),t._v(" Github Pages & Gitee Pages 服务")]),t._v(" "),e("blockquote",[e("p",[t._v("作用：将我们发布上 git 仓库的代码，做一个部署进行展示 "),e("code",[t._v("（username: github 或者 gitee 的用户名）")])])]),t._v(" "),e("p",[t._v("github 与 gitee 的 区别：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("私人仓库：github 收费，gitee 免费")])]),t._v(" "),e("li",[e("p",[t._v("pages 服务: github 自动部署，gitee 手动部署")])]),t._v(" "),e("li",[e("p",[t._v("以 / 前缀的默认仓库名：github 是 username.github.io，gitee 是 username")])]),t._v(" "),e("li",[e("p",[t._v("自定义域名映射：github 免费，gitee 收费")])])]),t._v(" "),e("blockquote",[e("p",[t._v("github pages 简要流程")])]),t._v(" "),e("p",[t._v("相关说明文档：https://pages.github.com/")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("创建一个仓库，仓库名称为 github 用户名")])]),t._v(" "),e("li",[e("p",[t._v("新建一个 index.html 文件，输出点东西")])]),t._v(" "),e("li",[e("p",[t._v("访问网站 http://username.github.io")])]),t._v(" "),e("li",[e("p",[t._v("开启 ssl 证书，在仓库的 settings > options > Enforce HTTPS，打上沟即可")])])]),t._v(" "),e("p",[t._v("由于步骤上基本都一样，"),e("code",[t._v("gitee pages 略")])]),t._v(" "),e("blockquote",[e("p",[t._v("github 自定义域名映射")])]),t._v(" "),e("p",[t._v("在仓库创建一个 CNAME 文件，里面写上你要映射的域名，如：")]),t._v(" "),e("div",{staticClass:"language-txt line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("blog.hangstudy.com\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("p",[t._v("然后在自己的域名解析页面添加上对应的规则就好啦！")]),t._v(" "),e("p",[t._v("需要注意的是：官方不建议建议 ping 域名来获取 ip，从而用 ip 进行解析，因为域名是不会变的，ip 解析可能会变动出问题")]),t._v(" "),e("h3",{attrs:{id:"github-找开源项目搜索秘诀"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#github-找开源项目搜索秘诀"}},[t._v("#")]),t._v(" Github 找开源项目搜索秘诀")])])}),[],!1,null,null,null);s.default=i.exports}}]);